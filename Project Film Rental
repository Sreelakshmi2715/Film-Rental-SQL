use film_rental;
#1.What is the total revenue generated from all rentals in the database?

select sum(amount) revenue from payment;

# 2.How many rentals were made in each month_name?

select count(rental_id) rentals,monthname(rental_date) months from rental group by months;

#3.What is the rental rate of the film with the longest title in the database?

select title,length(title) len,rental_rate from film
order by len desc limit 1;

# 4.What is the average rental rate for films that were taken from the last 30 days from the date("2005-05-05 22:04:30")? 
select
avg(fil.rental_rate) average_rental_rate
from film fil
join inventory inv on fil.film_id = inv.film_id
join rental ren on inv.inventory_id = ren.inventory_id
where ren.rental_date >= '2005-04-05 22:04:30';


# 5.What is the most popular category of films in terms of the number of rentals?

select count(ren.rental_id) no_of_rentals,cat.name category from rental ren
join inventory inv on inv.inventory_id=ren.inventory_id
join film fil on fil.film_id=inv.film_id
join film_category filcat on filcat.film_id=fil.film_id
join category cat on cat.category_id=filcat.category_id
group by category
order by no_of_rentals desc
limit 1;

# 6.Find the longest movie duration from the list of films that have not been rented by any customer.

select max(fil.length) duration,fil.title title from film fil
left join inventory inv on inv.film_id=fil.film_id
left join rental ren on ren.inventory_id=inv.inventory_id
where ren.customer_id is null
group by title
order by duration desc;


# 7.What is the average rental rate for films, broken down by category? 

select avg(fil.rental_rate) rate,cat.name category from film fil
left join film_category filcat on filcat.film_id=fil.film_id
left join category cat on cat.category_id=filcat.category_id
group by category;


#  8.What is the total revenue generated from rentals for each actor in the database?

select sum(pay.amount) revenue ,concat(act.first_name," ",act.last_name) name 
from actor act 
left join film_actor filact on filact.actor_id=act.actor_id
left join film fil on fil.film_id=filact.film_id
left join inventory inv on inv.film_id=fil.film_id
left join rental ren on ren.inventory_id=inv.inventory_id
left join payment pay on pay.rental_id=ren.rental_id
group by name;


#  9.Show all the actors who worked in a film having a "Wrestler" in the description.

select concat(act.first_name," ",act.last_name) actors from actor act
join film_actor filact on filact.actor_id=act.actor_id
join film fil on fil.film_id=filact.film_id
where fil.description like '%wrestler%'; 


# 10.Which customers have rented the same film more than once?

select ren.customer_id cust_id,count(*) rental_count,fil.film_Id film_id
from rental ren left join inventory inv on inv.inventory_id=ren.inventory_id
left join film fil on fil.film_id=inv.film_id
group by cust_id,film_id
having rental_count>1;

# 11.How many films in the comedy category have a rental rate higher than the average rental rate?

select count(*) comedy_category from film fil join film_category filcat
on fil.film_id=filcat.film_id
join category cat on cat.category_id=filcat.category_id
where fil.rental_rate>(select avg(rental_rate) from film) and cat.name='comedy';

# 12.Which films have been rented the most by customers living in each city?

SELECT title, city
FROM (
    SELECT fil.title, c.city,
           ROW_NUMBER() OVER (PARTITION BY c.city ORDER BY COUNT(ren.rental_id) DESC) AS film_rank
    FROM city c
    JOIN address ad ON ad.city_id = c.city_id
    JOIN staff st ON st.address_id = ad.address_id
    JOIN rental ren ON ren.staff_id = st.staff_id
    JOIN inventory inv ON inv.inventory_id = ren.inventory_id
    JOIN film fil ON fil.film_id = inv.film_id
    GROUP BY fil.title, c.city
) AS RankedFilms
WHERE film_rank = 1;


# 13.What is the total amount spent by customers whose rental payments exceed $200?

select sum(amount) amount,customer_id cust_id from payment
group by cust_id
having amount>200; 


# 14.Display the fields which are having foreign key constraints related to the "rental" table.

use information_schema;
select
    con.constraint_name,
    con.table_name,
    con.column_name,
    con.referenced_table_name,
    con.referenced_column_name
from information_schema.key_column_usage con
where con.referenced_table_name = 'rental';

use film_rental;

# 15.Create a View for the total revenue generated by each staff member, broken down by store city with the country name.

create view StaffRevenue as
select
st.staff_id, concat(st.first_name,' ', st.last_name) as staff_name,
c.city as store_city,co.country as store_country,
sum(p.amount) as total_revenue
from staff st
join store s on st.store_id = s.store_id
join address a on s.address_id = a.address_id
join city c on a.city_id = c.city_id
join country co on c.country_id = co.country_id
join rental r on st.staff_id = r.staff_id
join payment p on r.rental_id = p.rental_id
group by st.staff_id, st.first_name, st.last_name, c.city, co.country;
    
select * from staffRevenue;

# 16.Create a view based on rental information consisting of visiting_day, customer_name, the title of the film,  no_of_rental_days, the amount paid by the customer along with the percentage of customer spending.

create view RentalSummary as
select r.rental_id, r.rental_date  visiting_day,
concat(c.first_name, ' ', c.last_name) customer_name,
f.title film_title, datediff(r.return_date, r.rental_date) as no_of_rental_days,
p.amount as amount_paid,
(p.amount / (select sum(amount) from payment) * 100) as spending_percentage
from rental r
join customer c on r.customer_id = c.customer_id
join payment p on r.rental_id = p.rental_id
join inventory inv on r.inventory_id = inv.inventory_id
join film f on inv.film_id = f.film_id;
    
select * from RentalSummary;

# 17.Display the customers who paid 50% of their total rental costs within one day

select c.customer_id,
concat(c.first_name, ' ', c.last_name) as customer_name,
count(r.rental_id) as total_rentals,
sum(p.amount) as total_amount_paid,
sum(datediff(r.return_date, r.rental_date) = 0) as one_day_rentals
from customer c
join rental r on c.customer_id = r.customer_id
join payment p on r.rental_id = p.rental_id
group by c.customer_id, customer_name
having total_amount_paid >= 0.5 * (select sum(amount) from payment where customer_id = c.customer_id)
and one_day_rentals > 0;

